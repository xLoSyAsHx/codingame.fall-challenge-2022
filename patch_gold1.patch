diff --git a/main.cpp b/main.cpp
index 6b228a9..ccac03b 100644
--- a/main.cpp
+++ b/main.cpp
@@ -128,7 +128,12 @@ struct MapCell {
         if (recycleProfit == -1)
         {
             std::vector<MapCell*> n = getCellNeighbours();
-            recycleProfit = std::accumulate(n.begin(), n.end(), scrap_amount, [](int acc, MapCell* rhd) { return acc + rhd->scrap_amount; });
+
+            recycleProfit = scrap_amount;
+            for (auto neighbour : n)
+            {
+                recycleProfit += std::min(scrap_amount, neighbour->scrap_amount);
+            }
         }
         return recycleProfit;
     }
@@ -451,16 +456,14 @@ int getEnemyNeighboursCount(MapCell* cell)
 
     for (auto neighbour : cell->getCellNeighbours())
     {
-        if (!neighbour->isEnemyUnit())
+        if (neighbour->isMyUnit() || neighbour->recycler || neighbour->recyclerNextStep)
             continue;
 
         neighbours.emplace_back(neighbour);
         for (auto neighbour2 : neighbour->getCellNeighbours())
         {
-            if (!neighbour2->isEnemyUnit())
-                continue;
-
-            neighbours.emplace_back(neighbour2);
+            if (neighbour2->isEnemyUnit())
+                neighbours.emplace_back(neighbour2);
         }
     }
 
@@ -476,17 +479,15 @@ int getMyNeighboursCount(MapCell* cell)
 
     for (auto neighbour : cell->getCellNeighbours())
     {
-        if (!neighbour->isEnemyUnit())
+        if (!neighbour->isMyUnit())
             continue;
 
         neighbours.emplace_back(neighbour);
 
         for (auto neighbour2 : neighbour->getCellNeighbours())
         {
-            if (!neighbour2->isEnemyUnit())
-                continue;
-
-            neighbours.emplace_back(neighbour2);
+            if (neighbour2->isMyUnit())
+                neighbours.emplace_back(neighbour2);
         }
     }
 
@@ -597,14 +598,17 @@ std::vector<SpawnRecomendation> findBestForSpawn()
    // ----- 1 -----
     for (auto pBestForSpawnSell : GInf.myCUnits)
     {
-        if (int numEnemies = getEnemyNeighboursCount(pBestForSpawnSell); numEnemies && !willCellTurnToGrass(pBestForSpawnSell)
+        int numEnemies = getEnemyNeighboursCount(pBestForSpawnSell);
+
+        DBG_V3(pBestForSpawnSell->p, numEnemies, pBestForSpawnSell->can_spawn);
+        if (numEnemies && !willCellTurnToGrass(pBestForSpawnSell)
             && pBestForSpawnSell->can_spawn && !pBestForSpawnSell->recyclerNextStep
             && std::count_if(recomendations.begin(), recomendations.end(), [cell = pBestForSpawnSell](auto r) { return cell->p == r.p; }) == 0)
         {
             if (matter < 10)
                 break;
 
-            int toSpawn = std::min(matter / 10, getEnemyNeighboursCount(pBestForSpawnSell) + 1);
+            int toSpawn = std::min(matter / 10, numEnemies + 1);
 
             DBG_V3(pBestForSpawnSell->p, toSpawn, __LINE__);
             matter -= toSpawn;
@@ -614,6 +618,7 @@ std::vector<SpawnRecomendation> findBestForSpawn()
     
    // ----- 1.5 -----
    // Protect my cells
+   std::sort(GInf.myCells.begin(), GInf.myCells.end(), [](MapCell* lhd, MapCell* rhd) { return lhd->p.x < rhd->p.y; });
     for (auto pBestForSpawnSell : GInf.myCells)
     {
         if (int numEnemies = getEnemyNeighboursCount_D1(pBestForSpawnSell); numEnemies && !willCellTurnToGrass(pBestForSpawnSell)
@@ -1165,6 +1170,17 @@ protected:
     {
         DBG_MSG_STR("#### OnRecyclerPart start");
 
+        if (GInf.currentTurn == 3)
+        {
+            auto profCell = findBestRecycler();
+            command.AddBuildRec(profCell.cell->p);
+        }
+        if (GInf.myRecycleNum < GInf.enemyRecycleNum)
+        {
+            auto profCell = findBestRecycler();
+            command.AddBuildRec(profCell.cell->p);
+        }
+
         // Sort to extract far recyclers first
         std::sort(recyclers.begin(), recyclers.end(), [](Pos lhd, Pos rhd) { return GInf.bOppRight ? lhd.x > rhd.x : lhd.x < rhd.x; });
 
@@ -1190,6 +1206,11 @@ protected:
     }
     virtual void OnSpawnPart()
     {
+        if (GInf.currentTurn >= 9 && !GInf.isMyValid(Pos{12,1}))
+        {
+            command.AddSpawn(std::max(GInf.my_matter/10 - 1, 0), Pos{11, 1}, __LINE__);
+        }
+
         // Check, need to stop protect route
         bool bAllRecyclersFinishedWork = true;
         for (auto p : recyclers)
@@ -1300,6 +1321,7 @@ protected:
                 auto nearEnemyNooneCell_toMove = getNearest_EnemyOrNoone_CellPosToMove(cell_to_move); 
 
                 // isOnEnemySide(cell_to_move)
+                /*
                 if (cell_to_move->units > 1 && getEnemyNeighboursCount_D1(cell_to_move) == 0)
                 {
                     for (auto pCell : cell_to_move->getCellNeighbours())
@@ -1316,7 +1338,7 @@ protected:
                             command.AddMove(1, cell_to_move->p, pCell->p, __LINE__);
                         }
                 }
-                else if (cell_to_move->p.distanceTo(nearestEnemyPos) == 1)
+                else */if (cell_to_move->p.distanceTo(nearestEnemyPos) == 1)
                 {
                     numUnitsToMove = std::max(numUnitsToMove - getEnemyNeighboursCount_D1(cell_to_move), 0);
                     command.AddMove(numUnitsToMove, cell_to_move->p, nearestEnemyPos, __LINE__);
@@ -1570,7 +1592,7 @@ private:
                 LaunchWaveAlgorithm(pEnemyCell->p.y, pEnemyCell->p.x, &map, 20, extYLim, false, bTopRobot ? Dir::TOP : Dir::BOT); // Enemy first estimation
             }
             LaunchWaveAlgorithm(myP.y,    myP.x,    &map, 20, extYLim, true,  bTopRobot ? Dir::TOP : Dir::BOT); // My estimation
-            
+            /*
             for (int y = 0; y < g_mapHeight; ++y)
             {
                 std::cerr << std::endl;
@@ -1578,6 +1600,7 @@ private:
                     std::cerr << ' ' << std::setw(3) << map[y][x];
             }
             std::cerr << std::endl;
+            */
 
             // Determine target
             DBG_V(GInf.bAsymmetricMap);
